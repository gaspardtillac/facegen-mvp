import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const { prompt, faceImage } = await req.json();
    console.log("=== GOOGLE IMAGEN TEST ===");
    
    const response = await fetch(
      
`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=${process.env.GEMINI_API_TOKEN}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Create an image of this person in: ${prompt}`
            }, {
              inline_data: {
                mime_type: "image/jpeg",
                data: faceImage.split(",")[1]
              }
            }]
          }]
        })
      }
    );

    console.log("Status:", response.status);
    const data = await response.json();
    
    if (response.ok && data.candidates && 
data.candidates[0].content.parts) {
      const parts = data.candidates[0].content.parts;
      const imagePart = parts.find(part => part.inline_data);
      
      if (imagePart) {
        return NextResponse.json({
          imageUrl: 
`data:${imagePart.inline_data.mime_type};base64,${imagePart.inline_data.data}`,
          method: "gemini_nano_banana"
        });
      }
    }

    return NextResponse.json({
      method: "no_image",
      message: "Pas d'image générée",
      data: JSON.stringify(data)
    });

  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 
});
  }
}
npm run devcd ~/dev/facegen-mvp
import 
{ NextResponse } 
from 
"next/server";

export async function POST(req: Request) {
  try {
    const { prompt, faceImage } = await req.json();
    console.log("=== GOOGLE IMAGEN TEST ===");
    
    // Test simple avec Gemini d'abord
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_TOKEN}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Analyze this face and describe what you see. Then create a detailed prompt for generating this person in: ${prompt}`
            }, {
              inline_data: {
                mime_type: "image/jpeg",
                data: faceImage.split(",")[1]
              }
            }]
          }]
        })
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("GEMINI ERROR:", errorText);
      return NextResponse.json({ error: errorText }, { status: 400 });
    }

    const data = await response.json();
    const analysis = data.candidates[0].content.parts[0].text;
    console.log("ANALYSIS:", analysis);

    return NextResponse.json({ 
      method: "gemini_analysis",
      analysis: analysis,
      message: "Analyse réussie avec Gemini"
    });

  } catch (error) {
    console.error("ERROR:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
